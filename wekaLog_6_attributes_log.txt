=== Run information ===

Scheme:       weka.classifiers.trees.J48 -C 0.25 -M 2
Relation:     test-weka.filters.unsupervised.attribute.Remove-R1-2,4,9,11-12
Instances:    276
Attributes:   7
              pain
              abdominal_distention
              surgical_lesion
              rectal_temp_bin
              pulse_bin
              mucous
              death
Test mode:    split 66.0% train, remainder test

=== Classifier model (full training set) ===

J48 pruned tree
------------------

mucous = False: False (138.0/34.0)
mucous = True
|   pain = True: True (112.0/46.0)
|   pain = False: False (26.0/9.0)

Number of Leaves  : 	3

Size of the tree : 	5


Time taken to build model: 0 seconds

=== Evaluation on test split ===

Time taken to test model on test split: 0 seconds

=== Summary ===

Correctly Classified Instances          63               67.0213 %
Incorrectly Classified Instances        31               32.9787 %
Kappa statistic                          0.3124
K&B Relative Info Score                 12.6256 %
K&B Information Score                   11.4779 bits      0.1221 bits/instance
Class complexity | order 0              90.9096 bits      0.9671 bits/instance
Class complexity | scheme               82.7676 bits      0.8805 bits/instance
Complexity improvement     (Sf)          8.142  bits      0.0866 bits/instance
Mean absolute error                      0.4243
Root mean squared error                  0.4593
Relative absolute error                 88.7586 %
Root relative squared error             94.0156 %
Total Number of Instances               94     

=== Detailed Accuracy By Class ===

                 TP Rate  FP Rate  Precision  Recall   F-Measure  MCC      ROC Area  PRC Area  Class
                 0.595    0.281    0.579      0.595    0.587      0.312    0.688     0.529     True
                 0.719    0.405    0.732      0.719    0.726      0.312    0.688     0.730     False
Weighted Avg.    0.670    0.356    0.672      0.670    0.671      0.312    0.688     0.651     

=== Confusion Matrix ===

  a  b   <-- classified as
 22 15 |  a = True
 16 41 |  b = False

=== Source code ===

// Generated with Weka 3.8.4
//
// This code is public domain and comes with no warranty.
//
// Timestamp: Tue Sep 22 12:15:39 GMT 2020

package weka.classifiers;

import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.Capabilities.Capability;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.RevisionUtils;
import weka.classifiers.Classifier;
import weka.classifiers.AbstractClassifier;

public class WekaWrapper
  extends AbstractClassifier {

  /**
   * Returns only the toString() method.
   *
   * @return a string describing the classifier
   */
  public String globalInfo() {
    return toString();
  }

  /**
   * Returns the capabilities of this classifier.
   *
   * @return the capabilities
   */
  public Capabilities getCapabilities() {
    weka.core.Capabilities result = new weka.core.Capabilities(this);

    result.enable(weka.core.Capabilities.Capability.NOMINAL_ATTRIBUTES);
    result.enable(weka.core.Capabilities.Capability.NUMERIC_ATTRIBUTES);
    result.enable(weka.core.Capabilities.Capability.DATE_ATTRIBUTES);
    result.enable(weka.core.Capabilities.Capability.MISSING_VALUES);
    result.enable(weka.core.Capabilities.Capability.NOMINAL_CLASS);
    result.enable(weka.core.Capabilities.Capability.MISSING_CLASS_VALUES);


    result.setMinimumNumberInstances(0);

    return result;
  }

  /**
   * only checks the data against its capabilities.
   *
   * @param i the training data
   */
  public void buildClassifier(Instances i) throws Exception {
    // can classifier handle the data?
    getCapabilities().testWithFail(i);
  }

  /**
   * Classifies the given instance.
   *
   * @param i the instance to classify
   * @return the classification result
   */
  public double classifyInstance(Instance i) throws Exception {
    Object[] s = new Object[i.numAttributes()];
    
    for (int j = 0; j < s.length; j++) {
      if (!i.isMissing(j)) {
        if (i.attribute(j).isNominal())
          s[j] = new String(i.stringValue(j));
        else if (i.attribute(j).isNumeric())
          s[j] = new Double(i.value(j));
      }
    }
    
    // set class value to missing
    s[i.classIndex()] = null;
    
    return WekaClassifier.classify(s);
  }

  /**
   * Returns the revision string.
   * 
   * @return        the revision
   */
  public String getRevision() {
    return RevisionUtils.extract("1.0");
  }

  /**
   * Returns only the classnames and what classifier it is based on.
   *
   * @return a short description
   */
  public String toString() {
    return "Auto-generated classifier wrapper, based on weka.classifiers.trees.J48 (generated with Weka 3.8.4).\n" + this.getClass().getName() + "/WekaClassifier";
  }

  /**
   * Runs the classfier from commandline.
   *
   * @param args the commandline arguments
   */
  public static void main(String args[]) {
    runClassifier(new WekaWrapper(), args);
  }
}

class WekaClassifier {

  public static double classify(Object[] i)
    throws Exception {

    double p = Double.NaN;
    p = WekaClassifier.N5c2d863b4(i);
    return p;
  }
  static double N5c2d863b4(Object []i) {
    double p = Double.NaN;
    if (i[5] == null) {
      p = 1;
    } else if (i[5].equals("False")) {
      p = 1;
    } else if (i[5].equals("True")) {
    p = WekaClassifier.N5d06a7f05(i);
    } 
    return p;
  }
  static double N5d06a7f05(Object []i) {
    double p = Double.NaN;
    if (i[0] == null) {
      p = 0;
    } else if (i[0].equals("True")) {
      p = 0;
    } else if (i[0].equals("False")) {
      p = 1;
    } 
    return p;
  }
}
